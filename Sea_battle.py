from random import randint
from copy import copy
from time import sleep


class Ship:  # –î–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª–µ–π
    _id = 0

    def __init__(self, length, tp=1, x=None, y=None):
        self.check_length_tp(length, tp)
        self._length = length  # –î–ª–∏–Ω–∞ –∫–æ—Ä–∞–±–ª—è (–æ—Ç 1 –¥–æ 4)
        self._tp = tp  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (1 - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ, 2 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ)
        self._x, self._y = x, y  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∫–æ—Ä–∞–±–ª—è
        self._is_move = True  # True - –∫–æ—Ä–∞–±–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è, False - –Ω–µ –º–æ–∂–µ—Ç. –ï—Å–ª–∏ —Ö–æ—Ç—å 1 –ø–æ–ø–∞–¥–∞–Ω–∏–µ, —Ç–æ False
        self._cells = [1 for i in range(self._length)]  # –°–ø–∏—Å–æ–∫ –¥–ª–∏–Ω–æ–π _length. 1 - –Ω–µ—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è, 2 - –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        self.ship_coord = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        if self._x is not None and self._y is not None:
            self.generate_ship_coord()

    def generate_ship_coord(self):
        vector1, vector2 = 0 if self._tp == 1 else 1, 1 if self._tp == 1 else 0
        self.ship_coord = [(self._x + i * vector1, self._y + i * vector2) for i in range(self._length)]

    def check_length_tp(self, l, tp):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
        if l not in range(1, 5) or tp not in range(1, 3) or not isinstance(tp, int) or not isinstance(l, int):
            raise IndexError('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è')

    def set_start_coords(self, x, y):  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        self._x = x
        self._y = y
        self.generate_ship_coord()

    def get_start_coords(self):  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ—Ä–∞–±–ª—è
        return self._x, self._y

    def move(self, go):  # –ï—Å–ª–∏ go -1 –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥, –µ—Å–ª–∏ -1, —Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
        if go not in range(-1, 2, 2):
            raise TypeError('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è')
        if not self._is_move:
            raise IndexError('–ö–æ—Ä–∞–±–ª—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ')
        try:
            vector1, vector2 = 0 if self._tp == 1 else 1, 1 if self._tp == 1 else 0
            self._x, self._y = (self._x - 1 * vector1, self._y - 1 * vector2) if go == -1 else (self._x + 1 * vector1, self._y + 1 * vector2)
        except:
            pass


    def is_collide(self, ship):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –∫–æ—Ä–∞–±–ª—å —Å –¥—Ä—É–≥–∏–º
        c = ship.get_start_coords()
        x_y = self.get_start_coords()
        if self._length == 1:
            coord = x_y,
        else:
            coord = (x_y, (x_y[0], x_y[1] + self._length - 1)) if self._tp == 1 else (x_y, (x_y[0] + self._length - 1, x_y[1]))

        for q in coord:
            for i in ((q[0] - 1, q[1]), (q[0] - 1, q[1] + 1), (q[0], q[1] + 1), (q[0] + 1, q[1] + 1), (q[0], q[1]),
                      (q[0] + 1, q[1]), (q[0] + 1, q[1] - 1), (q[0], q[1] - 1), (q[0] - 1, q[1] - 1)):
                if i in tuple((c[0] + i, c[1]) if ship._tp == 2 else (c[0], c[1] + i) for i in range(ship._length)):
                    return True
        return False

    def is_out_pole(self, size=10):  # –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø–æ–ª–µ, –≤–µ—Ä–Ω—ë—Ç True, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ False
        x_pole = self._x + self._length - 1 if self._tp == 2 else self._x
        y_pole = self._y + self._length - 1 if self._tp == 1 else self._y
        if x_pole > size - 1 or y_pole > size - 1:
            return True
        return False

    def __setattr__(self, key, value):
        if key in ('_x', '_y') and value is not None:
            if value < 0 or value > 10:
                raise IndexError(f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ {key} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è 10 –Ω–∞ 10')
        self.__dict__[key] = value

    def __getitem__(self, item):
        return self._cells[item]

    def __setitem__(self, key, value):
        if value != 2:
            raise TypeError('Value –≤ –º–µ—Ç–æ–¥–µ setitem –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ 2')
        self._cells[key] = value

    def __str__(self):
        return (f'–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã = {self.get_start_coords()}, –¥–ª–∏–Ω–∞ = {self._length}, '
                f'–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ = {self._tp}, –ø–æ–ª–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã = {self.ship_coord}')


class GamePole:  # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    def __init__(self, size=10):
        self.check_size(size)
        self.size = size
        self.pole = [[0] * self.size for i in range(self.size)]
        self._ships = []  # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π

    def check_size(self, size):
        if not isinstance(size, int):
            raise TypeError('Size –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        if size <= 0:
            raise TypeError('Size –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')

    def init(self):
        add_3_size_ship = [self._ships.append(Ship(4, tp=randint(1, 2))) for i in range(1)]
        add_3_size_ship = [self._ships.append(Ship(3, tp=randint(1, 2))) for i in range(2)]
        add_2_size_ship = [self._ships.append(Ship(2, tp=randint(1, 2))) for i in range(3)]
        add_1_size_ship = [self._ships.append(Ship(1, tp=randint(1, 2))) for i in range(4)]
        pole_check = []
        for ship_main in self._ships:
            count_ship_main = True
            while count_ship_main:
                ship_main.set_start_coords(randint(0, 10), randint(0, 10))
                if not ship_main.is_out_pole(self.size):
                    if len(pole_check) == 0:
                            count_ship_main = False
                            pole_check.append(ship_main)
                    else:
                        count = 0
                        for i in pole_check:
                            if not i.is_collide(ship_main):
                                count += 1
                        if count == len(pole_check):
                            count_ship_main = False
                            pole_check.append(ship_main)
        self.generate_pole(self.size)

    def get_ships(self):
        return self._ships

    def move_ships(self):  # –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤–ø–µ—Ä—ë–¥ –∏–ª–∏ –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
        for index, ship in enumerate(self._ships):
            if self.move_one_ship(index, 1):
                pass
            else:
                self.move_one_ship(index, -1)

    def move_one_ship(self, index, vector):  # True, –µ—Å–ª–∏ —Å–¥–≤–∏–Ω—É–ª—Å—è, False - –µ—Å–ª–∏ –Ω–µ —Å–¥–≤–∏–Ω—É–ª—Å—è
        ship = copy(self._ships[index])
        if not ship.is_out_pole(self.size):
            ship.move(vector)
        check_move_all = list(True if i != ship and not ship.is_collide(i) else False for i in self._ships)
        if (True if len(list(filter(lambda x: x, check_move_all))) == (len(self._ships) - 1) else False) and not ship.is_out_pole(self.size):
            self._ships[index].move(vector)
            vec1, vec2 = (0, 1) if ship._tp == 1 else (1, 0)
            if vector == 1:
                self.pole[ship._x - 1 * vec1][ship._y - 1 * vec2] = 0
            else:
                self.pole[ship._x + 1 * vec1 * (ship._length)][ship._y + 1 * vec2 * (ship._length)] = 0
            return True
        return False

    def generate_pole(self, i=10):
        for ship in self._ships[:i]:
            vector_1, vector_2 = 0 if ship._tp == 1 else 1, 1 if ship._tp == 1 else 0
            for i in range(ship._length):
                self.pole[ship.get_start_coords()[0] + 1 * i * vector_1][ship.get_start_coords()[1] + 1 * i * vector_2] = ship._cells[i]

    def show(self):
        unicode = {0: '‚¨ú', 1: 'üî¥', 2: '‚ùå'}
        print('\n'.join('\t'.join(unicode[q] for q in i) for i in self.pole))

    def get_pole(self):
        return tuple(tuple(i for i in q) for q in self.pole)


class SeaBattle:
    def __init__(self):  # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π
        self.pole_gamer = GamePole()
        self.pole_gamer.init()
        self.gamer_pole_fire = [['‚¨ú'] * 10 for i in range(10)]
        self.check_coord = []

        self.pole_computer = GamePole()
        self.pole_computer.init()
        self.computer_pole_fire = [['‚¨ú'] * 10 for i in range(10)]


        print(f'\n{chr(10146)}–î–ª—è –ø–æ–±–µ–¥—ã –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å 20 –æ—á–∫–æ–≤ (1 –æ—á–∫–æ - 1 –ø–æ–ø–∞–¥–∞–Ω–∏–µ)\n'
              f'{chr(10146)}–î–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–∞–±–µ—Ä—ë—Ç—Å—è —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –≤—Å–µ –≤—Ä–∞–∂–µ—Å–∫–∏–µ –∫–æ—Ä–∞–±–ª–∏\n'
              f'{chr(10146)}–ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –≤–∑–æ—Ä–≤–µ—Ç—Å—è, —Ç–æ –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤—è—Ç—Å—è –∫—Ä–µ—Å—Ç–∏–∫–∏ –∏ —ç—Ç–∏ –ø–æ–ª—è –±—É–¥—É—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Å—Ç—Ä–µ–ª—è–Ω–Ω—ã–º–∏\n')

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        self.yes_hit = True  # –ü–æ–∫–∞ True, –∫–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç —Å—Ç—Ä–µ–ª—è—Ç—å
        self.x_comp_hit, self.y_comp_hit = None, None  # –î–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
        self.x_comp_hit2, self.y_comp_hit2 = None, None  # –î–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
        self.hit_index = 0  # –ß—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ–æ–Ω –ø–æ–ø–∞–¥–∞–Ω–∏—è
        self.hit_ship_computer = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        self.random_hit = True  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–µ–ª—å–±—É, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
        self.next_hit = False  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω—É—é —Å—Ç—Ä–µ–ª—å–±—É, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
        self.hit_index = 0  # –î–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        self.num_hit = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ 1 - —Ç–æ —Å—Ç—Ä–µ–ª—å–±–∞ –ø–æ –≤—Å–µ–º—É —Ñ–æ–Ω—É, –µ—Å–ª–∏ 2 - —Ç–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–æ–Ω—É
        self.vector_two_hit = None
        self.hit_tuple2 = None  # –î–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
        self.hit_index2 = 0  # –ß—Ç–æ–±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –ù–£–ñ–ù–´–ô —Ñ–æ–Ω
        self.block_hit_tuple2 = True  # –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ù–£–ñ–ù–´–ô —Ñ–æ–Ω –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª
        self.block_hit_tuple2_end = False  # –ó–∞–ø—Ä–µ—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ù–£–ñ–ù–û–ì–û –ü–û–°–õ–ï–î–ù–ï–ì–û —Ñ–æ–Ω–∞ –¥–ª—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
        self.nums_hit = 0  # –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–æ–≥–æ, –∫–æ–≥–¥–∞ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤—Ç–æ—Ä–æ–π –≤—ã—Å—Ç—Ä–µ–ª
        self.cells_computer = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –∑–¥–µ—Å—å —è—á–µ–π–∫–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ–Ω —Å—Ç—Ä–µ–ª—è—Ç—å –Ω–µ –±—É–¥–µ—Ç
        self.countssss = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ, –ø–æ—Ç–æ–º –£–î–ê–õ–ò–¢–¨
        self.result_game = None  # –ò—Ç–æ–≥ –∏–≥—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫—Ç–æ –≤—ã–∏–≥—Ä–∞–ª

    def start_game(self):  # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
        hit_gamer = 0
        while hit_gamer != 20:  # –ü–æ–∫–∞ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä

            # –¢—É—Ç —Å—Ç—Ä–µ–ª—è–µ—Ç –∏–≥—Ä–æ–∫
            next_step_gamer = True
            while next_step_gamer:
                print(f'{chr(127993)}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –æ—á–∫–æ–≤: {hit_gamer}{' ' * 29}{chr(128187)}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–±—Ä–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä: {self.hit_ship_computer}')
                print(f'–í—Ä–∞–∂–µ—Å–∫–æ–µ –ø–æ–ª–µ, –≤—ã—Å—Ç—Ä–µ–ª—ã —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–æ –Ω–µ–º—É{' ' * 15} –í—ã—Å—Ç—Ä–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–≤–µ—Ä—à–∏–ª –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ –≤–∞—à–µ–º—É –ø–æ–ª—é')
                self.show_gamer_pole_fire()
                check_hit_gamer = True
                x_gamer, y_gamer = None, None
                while check_hit_gamer:
                    try:
                        x_gamer, y_gamer = input('–í–∞—à —Ö–æ–¥: ').split()
                    except ValueError:
                        print('–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
                        continue
                    if not x_gamer.isdigit() or not y_gamer.isdigit():
                        print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
                        continue
                    if (int(x_gamer), int(y_gamer)) in self.check_coord:
                        print('–ù–∞ —ç—Ç—É —Ç–æ—á–∫—É —É–∂–µ –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –≤—ã—Å—Ç—Ä–µ–ª, —Å–¥–µ–ª–∞–π—Ç–µ –¥—Ä—É–≥–æ–π —Ö–æ–¥')
                        continue
                    if int(x_gamer) not in range(1, 11) or int(y_gamer) not in range(1, 11):
                        print('–í—ã—Å—Ç—Ä–µ–ª –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [1, 10]')
                        continue
                    check_hit_gamer = False
                self.check_coord.append((int(x_gamer), int(y_gamer)))
                # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã—Å—Ç—Ä–µ–ª
                self.step_fire(int(x_gamer) - 1, int(y_gamer) - 1, self.pole_computer, self.gamer_pole_fire, 2)

                if self.pole_computer.pole[int(x_gamer) - 1][int(y_gamer) - 1] == 1:
                    print('–¢—ã –ø–æ–ø–∞–ª')
                    hit_gamer += 1
                    if hit_gamer == 20:  # –í—ã–∏–≥—Ä–∞–ª —á–µ–ª–æ–≤–µ–∫, —É—Å–ª–æ–≤–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É
                        self.result_game = 1
                        break

                else:
                    next_step_gamer = False
                    print('–¢—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è')
                sleep(0.4)
                print(f"{'-' * 39}")
            if hit_gamer == 20:  # –í—ã–∏–≥—Ä–∞–ª —á–µ–ª–æ–≤–µ–∫, —É—Å–ª–æ–≤–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É
                self.result_game = 1
                break

            print('–•–æ–¥ –±–µ–∑–¥—É—à–Ω–æ–π –º–∞—à–∏–Ω—ã –ø–æ –≤–∞—à–µ–º—É –ø–æ–ª—é')
            sleep(0.4)
            # –¢—É—Ç —Å—Ç—Ä–µ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞ —Ä–∞–Ω–¥–æ–º
            while self.yes_hit:
                if self.random_hit:  # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç—Ä–µ–ª—è—Ç—å –ª–∏ –Ω–∞—É–≥–∞–¥
                    if self.hit_cumputer_random():  # –°—Ç—Ä–µ–ª—è–µ—Ç –Ω–∞—É–≥–∞–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ

                        self.next_hit = True  # –ß—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –≤—ã—Å—Ç—Ä–µ–ª –±—ã–ª –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π
                        self.random_hit = False  # –ü–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–∞–µ–º —Å—Ç—Ä–µ–ª—è—Ç—å –Ω–∞ —Ä–∞–Ω–¥–æ–º
                        if self.hit_ship_computer == 20:
                            self.result_game = 0
                            break

                if self.hit_ship_computer == 20:
                    self.result_game = 0
                    break

                if self.next_hit:
                    self.hit_cumputer_deliberate()

            self.yes_hit = True  # –ß—Ç–æ–±—ã –∫–æ–º–ø—å—é—Ç–µ—Ä —Å—Ç—Ä–µ–ª—è–ª –ø–æ—Å–ª–µ –∏–≥—Ä–æ–∫–∞
            print(f"{'-' * 39}")

            if self.hit_ship_computer == 20:  # –í—ã–∏–≥—Ä–∞–ª –∫–æ–º–ø—å—é—Ç–µ—Ä, —É—Å–ª–æ–≤–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É
                self.result_game = 0
                break

            sleep(0.3)

        for i in range(1, 10):
            sleep(0.3)
            print(i * '.')
        print('–ü–æ–±–µ–¥–∞ –∫–æ–∂–∞–Ω–æ–≥–æ –º–µ—à–∫–∞' if self.result_game == 1 else '–ü–æ–±–µ–¥–∞ –±–µ–∑–¥—É—à–Ω–æ–π –º–∞—à–∏–Ω—ã')

    def hit_cumputer_deliberate(self):
        next_step_computer = True

        while next_step_computer:  # –ü–æ–∫–∞ —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ

            # –ö–æ–≥–¥–∞ –æ–¥–Ω–æ –ø–æ–ø–∞–¥–∞–Ω–∏–µ, —Ç–æ —Å—Ç—Ä–µ–ª—è–µ—Ç –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã (–≤–æ –≤–µ—Å—å —Ñ–æ–Ω)
            if self.num_hit == 1:  # –û–¥–Ω–æ –ø–æ–ø–∞–¥–∞–Ω–∏–µ, —Å—Ç—Ä–µ–ª—è–µ–º –ø–æ –≤—Å–µ–º—É —Ñ–æ–Ω—É

                x_new, y_new = self.x_comp_hit - 1, self.y_comp_hit - 1
                hit_tuple = ((x_new + 1, y_new), (x_new - 1, y_new), (x_new, y_new + 1), (x_new, y_new - 1))

                for fire in hit_tuple[self.hit_index:]:
                    if 0 <= fire[0] <= 9 and 0 <= fire[1] <= 9:  # –ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–æ–ª—è

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç—Ä–µ–ª—è–ª –ª–∏ –≤ —ç—Ç—É —Ç–æ—á–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä
                        if self.computer_pole_fire[fire[0]][fire[1]] == '‚¨ú':  # –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª, —Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª
                            self.step_fire(fire[0], fire[1], self.pole_gamer, self.computer_pole_fire, 1) # –í—ã—Å—Ç—Ä–µ–ª
                            self.cells_computer.append((fire[0] + 1, fire[1] + 1))  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å—Ç—Ä–µ–ª –≤ —Å—Ç—Ä–µ–ª—è–Ω–Ω—ã–π
                            self.show_computer_pole_fire()  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞


                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä
                            if self.pole_gamer.pole[fire[0]][fire[1]] == 1:
                                self.hit_ship_computer += 1  # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—É –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                                yes_kill = 0  # 0 - –∫–æ—Ä–∞–±–ª—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω, 1 - —É–Ω–∏—á—Ç–æ–∂–µ–Ω



                                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å
                                for ship in self.pole_gamer._ships:
                                    if (fire[0], fire[1]) in ship.ship_coord:
                                        if all(True if i == 2 else False for i in ship._cells):  # –ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                                            yes_kill = 1


                                if yes_kill == 1:  # –ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                                    # –ù–æ –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª !!!!!!!!!!!!!!!!!
                                    self.random_hit = True  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã
                                    self.next_hit = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã
                                    next_step_computer = False  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ while
                                    self.hit_index = 0  # –û–±–Ω—É–ª—è–µ–º –æ–±—â–∏–π —Ñ–æ–Ω
                                    self.x_comp_hit, self.y_comp_hit = None, None  # –û–±–Ω—É–ª—è–µ–º –≤—ã—Å—Ç—Ä–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏
                                    print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª –∏ —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤–∞—à –∫–æ—Ä–∞–±–ª—å')
                                    sleep(1)
                                    return True  # –í—ã—Ö–æ–¥–∏–º —Å —Ñ—É–Ω–∫—Ü–∏–∏


                                else:  # –ö–æ—Ä–∞–±–ª—å –ù–ï —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ø–æ—Å–ª–µ –í–¢–û–†–û–ì–û –≤—ã—Å—Ç—Ä–µ–ª–∞
                                    '''
                                    –ï—Å—Ç—å –¥–≤–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è, –Ω–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –∑–Ω–∞—á–∏—Ç –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π —Ñ–æ–Ω
                                    1) –£–∑–Ω–∞—Ç—å, –ø–æ –∫–∞–∫–æ–º—É –∫–æ—Ä–∞–±–ª—é –∏–¥–µ—Ç —Å—Ç—Ä–µ–ª—å–±–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —É –Ω–µ–≥–æ –Ω—É–∂–Ω—ã–π —Ñ–æ–Ω, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π
                                    –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π.
                                    2) –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ–Ω
                                    3) –í—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —É—Å–ª–æ–≤–∏—è, —Ç–æ –µ—Å—Ç—å self.num_hit = 2
                                    –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—â—É —Å–Ω–æ–≤–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª, —Ç–æ –µ—Å—Ç—å –≤–µ—Ä–Ω–µ—Ç True
                                    –ê —Ç–∞–∫ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 'FonTwo', —á—Ç–æ–±—ã —Å—Ç—Ä–µ–ª—è–ª –ø–æ –Ω—É–∂–Ω–æ–º—É —Ñ–æ–Ω—É
                                    '''
                                    self.nums_hit += 1  # –î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
                                    self.num_hit = 2  # –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—Ç—Ä–µ–ª—É –ù–£–ñ–ù–û–ì–û —Ñ–æ–Ω–∞
                                    # if self.nums_hit == 2:

                                    self.hit_index = 0  # –û–±–Ω—É–ª—è–µ–º –æ–±—â–∏–π —Ñ–æ–Ω
                                    self.x_comp_hit2, self.y_comp_hit2 = fire[0] + 1, fire[1] + 1  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã—Å—Ç—Ä–µ–ª
                                    print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª')
                                    sleep(1)
                                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ for, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç –û–ë–©–ò–ô —Ñ–æ–Ω

                            else:  # –ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è, –≤—ã—Å—Ç—Ä–µ–ª –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
                                print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è')
                                sleep(1)
                                # –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö, —Ç–æ —Å—Ç—Ä–µ–ª—è–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω–µ –≤–æ–∑–ª–µ –∫–æ—Ä–∞–±–ª—è
                                self.hit_index += 1  # –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–æ —Ñ–æ–Ω—É
                                next_step_computer = False  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª while
                                self.yes_hit = False  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª—è—Ç—å –∏ –≤—ã—Å—Ç—Ä–µ–ª –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫—É
                                return True  # –í—ã—Ö–æ–¥–∏–º —Å —Ñ—É–Ω–∫—Ü–∏–∏

            if self.num_hit == 2:  # –î–≤–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –ø–æ–ø–∞–¥–∞–Ω–∏–µ, —Å—Ç—Ä–µ–ª—è–µ–º –ø–æ –Ω—É–∂–Ω–æ–º—É —Ñ–æ–Ω—É

                if self.block_hit_tuple2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ù–£–ñ–ù–´–ô —Ñ–æ–Ω

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è: 1 - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π, 2 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π
                    self.vector_two_hit = 1 if self.x_comp_hit == self.x_comp_hit2 else 2

                    if self.vector_two_hit == 1:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                        if self.y_comp_hit < self.y_comp_hit2:
                            self.hit_tuple2 = [(self.x_comp_hit, self.y_comp_hit - 1), (self.x_comp_hit2, self.y_comp_hit2 + 1)]
                        else:
                            self.hit_tuple2 = [(self.x_comp_hit, self.y_comp_hit + 1), (self.x_comp_hit2, self.y_comp_hit2 - 1)]
                    else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                        if self.x_comp_hit < self.x_comp_hit2:
                            self.hit_tuple2 = [(self.x_comp_hit - 1, self.y_comp_hit), (self.x_comp_hit2 + 1, self.y_comp_hit2)]
                        else:
                            self.hit_tuple2 = [(self.x_comp_hit + 1, self.y_comp_hit), (self.x_comp_hit2 - 1, self.y_comp_hit2)]

                for fire in self.hit_tuple2[self.hit_index2:]:
                    fire = list(fire)
                    fire[0] -= 1
                    fire[1] -= 1
                    if 0 <= fire[0] <= 9 and 0 <= fire[1] <= 9:  # –ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–æ–ª—è

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç—Ä–µ–ª—è–ª –ª–∏ –≤ —ç—Ç—É —Ç–æ—á–∫—É –∫–æ–º–ø—å—é—Ç–µ—Ä
                        if self.computer_pole_fire[fire[0]][fire[1]] == '‚¨ú':  # –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–µ–ª—è–ª, —Ç–æ –¥–µ–ª–∞–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª
                            self.step_fire(fire[0], fire[1], self.pole_gamer, self.computer_pole_fire, 1)  # –í—ã—Å—Ç—Ä–µ–ª
                            self.cells_computer.append((fire[0] + 1, fire[1] + 1))  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Å—Ç—Ä–µ–ª –≤ —Å—Ç—Ä–µ–ª—è–Ω–Ω—ã–π
                            self.show_computer_pole_fire()  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª –ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä
                            if self.pole_gamer.pole[fire[0]][fire[1]] == 1:
                                self.hit_ship_computer += 1  # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä—É –ø–æ–ø–∞–¥–∞–Ω–∏–µ

                                yes_kill2 = 0  # 0 - –∫–æ—Ä–∞–±–ª—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω, 1 - —É–Ω–∏—á—Ç–æ–∂–µ–Ω

                                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É–Ω–∏—á—Ç–æ–∂–µ–Ω –ª–∏ –∫–æ—Ä–∞–±–ª—å
                                for ship in self.pole_gamer._ships:
                                    if (fire[0], fire[1]) in ship.ship_coord:
                                        if all(True if i == 2 else False for i in ship._cells):  # –ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                                            yes_kill2 = 1

                                if yes_kill2 == 1:  # –ü–æ–ø–∞–ª –∏ –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                                    # –ù–æ –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª !!!!!!!!!!!!!!!!!
                                    self.random_hit = True  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–Ω–æ–≤–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã
                                    self.next_hit = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã
                                    next_step_computer = False  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ while
                                    self.hit_index2 = 0  # –û–±–Ω—É–ª—è–µ–º –ù–£–ñ–ù–´–ô —Ñ–æ–Ω
                                    self.x_comp_hit, self.y_comp_hit = None, None  # –û–±–Ω—É–ª—è–µ–º –≤—ã—Å—Ç—Ä–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏
                                    self.x_comp_hit2, self.y_comp_hit2 = None, None  # –û–±–Ω—É–ª—è–µ–º –≤—ã—Å—Ç—Ä–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–æ–º–∏–Ω–∞–ª–∏
                                    self.num_hit = 1  # –û–±–Ω—É–ª—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å—Ç—Ä–µ–ª—è–ª –ø–æ —Ñ–æ–Ω—É
                                    self.vector_two_hit = None  # –û–±–Ω—É–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
                                    self.hit_tuple2 = None  # –û–±–Ω—É–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –§–û–ù–û–ú
                                    self.block_hit_tuple2 = True  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç—Ä–µ—Ç–∏–π –§–û–ù
                                    print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª –∏ —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤–∞—à –∫–æ—Ä–∞–±–ª—å')
                                    sleep(1)
                                    return True  # –í—ã—Ö–æ–¥–∏–º —Å —Ñ—É–Ω–∫—Ü–∏–∏

                                else:  # –ü–æ–ø–∞–ª, –Ω–æ –∫–æ—Ä–∞–±–ª—å –ù–ï —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                                    '''
                                    –¢—Ä–µ—Ç—å–µ –∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                                    –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å self.hit_tuple2 –∏ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ
                                    '''
                                    self.block_hit_tuple2 = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ù–£–ñ–ù–´–ô —Ñ–æ–Ω –≤ –Ω–∞—á–∞–ª–µ for
                                    self.num_hit = 2  # –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—Ç—Ä–µ–ª—É –ù–£–ñ–ù–û–ì–û —Ñ–æ–Ω–∞
                                    self.hit_index2 = 0  # –û–±–Ω—É–ª—è–µ–º –æ–±—â–∏–π —Ñ–æ–Ω

                                    # –¢—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–û–°–õ–ï–î–ù–ò–ô –§–û–ù
                                    fire[1] += 1
                                    fire[0] += 1
                                    if self.vector_two_hit == 1:  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
                                        if self.y_comp_hit < fire[1]:
                                            if self.y_comp_hit < self.y_comp_hit2:
                                                self.hit_tuple2 = [(self.x_comp_hit, self.y_comp_hit - 1),
                                                                (fire[0], fire[1] + 1)]
                                            else:
                                                self.hit_tuple2 = [(self.x_comp_hit, self.y_comp_hit2 - 1),
                                                                    (fire[0], fire[1] + 1)]

                                        else:
                                            if self.y_comp_hit < self.y_comp_hit2:
                                                self.hit_tuple2 = [(self.x_comp_hit, self.y_comp_hit2 + 1),
                                                                    (fire[0], fire[1] - 1)]
                                            else:
                                                self.hit_tuple2 = [(self.x_comp_hit, self.y_comp_hit + 1),
                                                                    (fire[0], fire[1] - 1)]


                                    else:  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–∞–±–ª—å
                                        if self.x_comp_hit < fire[0]:
                                            if self.x_comp_hit > self.x_comp_hit2:
                                                self.hit_tuple2 = [(self.x_comp_hit - 1, self.y_comp_hit),
                                                                    (fire[0] + 1, fire[1])]
                                            else:
                                                self.hit_tuple2 = [(self.x_comp_hit2 - 1, self.y_comp_hit),
                                                                    (fire[0] + 1, fire[1])]
                                        else:
                                            if self.x_comp_hit > self.x_comp_hit2:
                                                self.hit_tuple2 = [(self.x_comp_hit + 1, self.y_comp_hit),
                                                                    (fire[0] - 1, fire[1])]
                                            else:
                                                self.hit_tuple2 = [(self.x_comp_hit2 + 1, self.y_comp_hit),
                                                                    (fire[0] - 1, fire[1])]

                                    self.block_hit_tuple2_end = False  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –§–û–ù
                                    print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª')
                                    sleep(1)
                                    break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ for, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Å—Ç—Ä–µ–ª–∏–≤–∞–µ—Ç –û–ë–©–ò–ô —Ñ–æ–Ω

                            else:  # –ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è, –≤—ã—Å—Ç—Ä–µ–ª –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –§–û–ù–£
                                print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è')
                                sleep(1)
                                # –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö, —Ç–æ —Å—Ç—Ä–µ–ª—è–µ—Ç –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–æ–Ω–µ –≤–æ–∑–ª–µ –∫–æ—Ä–∞–±–ª—è
                                self.hit_index2 += 1  # –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–æ —Ñ–æ–Ω—É
                                next_step_computer = False  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª while
                                self.yes_hit = False  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª—è—Ç—å –∏ –≤—ã—Å—Ç—Ä–µ–ª –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫—É
                                return True  # –í—ã—Ö–æ–¥–∏–º —Å —Ñ—É–Ω–∫—Ü–∏–∏


    def hit_cumputer_random(self):
        random_hit = True
        x_comp, y_comp = None, None
        while random_hit:
            check_cells = True
            while check_cells:  # –°—Ç—Ä–µ–ª—è–µ—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–ø–∞–¥–µ—Ç –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—É—é –∫–ª–µ—Ç–∫—É
                x_comp_, y_comp_ = randint(1, 10), randint(1, 10)
                if (x_comp_, y_comp_) not in self.cells_computer:
                    self.cells_computer.append((x_comp_, y_comp_))
                    x_comp, y_comp = x_comp_, y_comp_
                    check_cells = False

            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤—ã—Å—Ç—Ä–µ–ª –Ω–∞ —Ä–∞–Ω–¥–æ–º
            self.step_fire(x_comp - 1, y_comp - 1, self.pole_gamer, self.computer_pole_fire, 1)  # –í—ã—Å—Ç—Ä–µ–ª
            self.show_computer_pole_fire()  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—è –ø–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞

            if self.pole_gamer.pole[x_comp - 1][y_comp - 1] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
                self.hit_ship_computer += 1  # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—É

                # –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Ç–æ —Å–Ω–æ–≤–∞ —Å—Ç—Ä–µ–ª—è–µ—Ç –Ω–∞—É–≥–∞–¥
                for ship in self.pole_gamer._ships:
                    if (x_comp - 1, y_comp - 1) in ship.ship_coord:
                        if all(True if i == 2 else False for i in ship._cells):
                            print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª –∏ —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤–∞—à –∫–æ—Ä–∞–±–ª—å')
                            sleep(1)
                            return False  # –°–ª–µ–¥—É—é—â–∏–π –≤—ã—Å—Ç—Ä–µ–ª –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –Ω–∞—É–≥–∞–¥

                        else:
                            '''
                            –ï—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≤—ã—Å—Ç—Ä–µ–ª –±—É–¥–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º.
                            –ò–∑ —ç—Ç–æ–≥–æ —Ü–∏–∫–ª–∞ While –Ω–∞–¥–æ –≤—ã–π—Ç–∏ –∏ —Å–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É while
                            '''
                            random_hit = False
                            # –ù–∞–¥–æ –∫–∞–∫-–Ω–∏–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª –ø–æ–ø–∞–¥–∞–Ω–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ—Ä–∞–±–ª—å –ù–ï —É–Ω–∏—á—Ç–æ–∂–∏–ª—Å—è
                            print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª')
                            sleep(1)
                            self.x_comp_hit,  self.y_comp_hit = x_comp_, y_comp_
                            return True  # –°–ª–µ–¥—É—é—â–∏–π –≤—ã—Å—Ç—Ä–µ–ª –±—É–¥–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π
            else:  # –ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è
                random_hit = False
                self.yes_hit = False  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª—è—Ç—å –∏ —Ö–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫—É
                print('–ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è')
                sleep(1)
        return False  # –°–ª–µ–¥—É—é—â–∏–π –≤—ã—Å—Ç—Ä–µ–ª –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –Ω–∞—É–≥–∞–¥

    def show_gamer_pole_fire(self):
        print(f' 1  2  3   4  5  6   7  8  9  10{' ' * 27} 1  2  3   4  5  6   7  8  9  10')
        # 20 19
        for q in range(len(self.gamer_pole_fire)):
            print(f' '.join(f"""{''.join(str(q) for q in self.gamer_pole_fire[q])}{q + 1} {' ' * 10 if q != (len(self.gamer_pole_fire) - 1) else ' ' * 9} {''.join(str(q) for q in self.computer_pole_fire[q])}{q + 1}"""))


    def show_computer_pole_fire(self):
        print(f' 1  2  3   4  5  6   7  8  9  10\n' +
              '\n'.join(f"{' '.join(str(q) for q in i)}{q + 1}" for q, i in enumerate(self.computer_pole_fire)))

    def step_fire(self, x, y, pole, pole_fire, cells_comp=None):  # –í—ã—Å—Ç—Ä–µ–ª
        if pole.pole[x][y] == 0:
            pole_fire[x][y] = '‚ùå'

        elif pole.pole[x][y] == 1:
            pole_fire[x][y] = '‚úÖ'
            for ship in pole._ships:
                vector_1, vector_2 = 0 if ship._tp == 1 else 1, 1 if ship._tp == 1 else 0
                for i in range(ship._length):
                    x_ship, y_ship = (ship.get_start_coords()[0] + 1 * i * vector_1), (ship.get_start_coords()[1] + 1 * i * vector_2)
                    if x == x_ship and y == y_ship:
                        ship._cells[i] = 2

                    if all(True if i == 2 else False for i in ship._cells):
                        for i in range(ship._length):
                            x_ship, y_ship = (ship.get_start_coords()[0] + 1 * i * vector_1), (ship.get_start_coords()[1] + 1 * i * vector_2)
                            for q in ((x_ship - 1, y_ship), (x_ship + 1, y_ship), (x_ship, y_ship - 1), (x_ship, y_ship + 1),
                                (x_ship - 1, y_ship - 1), (x_ship + 1, y_ship - 1), (x_ship - 1, y_ship + 1), (x_ship + 1, y_ship + 1)):
                                if 0 <= q[0] <= 9 and 0 <= q[1] <= 9:
                                    if pole_fire[q[0]][q[1]] == '‚¨ú':
                                        pole_fire[q[0]][q[1]] = '‚ùå'
                                        if cells_comp == 1:
                                            self.cells_computer.append((q[0] + 1, q[1] + 1))
                                        else:
                                            self.check_coord.append((q[0] + 1, q[1] + 1))

            return True
        return False


a = SeaBattle()
a.start_game()